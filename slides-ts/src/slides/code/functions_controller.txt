/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"crypto/sha1"
	"fmt"
	"time"

	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/util/intstr"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	logger "sigs.k8s.io/controller-runtime/pkg/log"

	v1alpha1 "github.com/rquitales/faas/api/v1alpha1"
)

// FunctionReconciler reconciles a Function object
type FunctionReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

//+kubebuilder:rbac:groups=serverless.rquitales.com,resources=Functions,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=serverless.rquitales.com,resources=Functions/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=serverless.rquitales.com,resources=Functions/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the Function object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.7.2/pkg/reconcile
func (r *FunctionReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	// log := r.Log.WithValues("webpage", req.NamespacedName)
	log := logger.FromContext(ctx)

	log.Info("starting reconcile")

	// Get custom resource.
	var function v1alpha1.Function
	if err := r.Get(ctx, req.NamespacedName, &function); err != nil {
		log.Error(err, "unable to fetch function")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Desired ConfigMap.
	cm, err := r.desiredConfigMap(function)
	if err != nil {
		return ctrl.Result{}, err
	}

	// Desired Deployment.
	dep, err := r.desiredDeployment(function, cm)
	if err != nil {
		return ctrl.Result{}, err
	}

	// Desired Service.
	ser, err := r.desiredService(function, cm)
	if err != nil {
		return ctrl.Result{}, err
	}

	// Patch (create/update) both owned resources.
	applyOpts := []client.PatchOption{client.ForceOwnership, client.FieldOwner("function-controller")}

	err = r.Patch(ctx, &cm, client.Apply, applyOpts...)
	if err != nil {
		return ctrl.Result{}, err
	}

	err = r.Patch(ctx, &dep, client.Apply, applyOpts...)
	if err != nil {
		return ctrl.Result{}, err
	}

	err = r.Patch(ctx, &ser, client.Apply, applyOpts...)
	if err != nil {
		return ctrl.Result{}, err
	}

	// Set the last update time.
	function.Status.LastUpdateTime = &metav1.Time{Time: time.Now()}
	if err = r.Status().Update(ctx, &function); err != nil {
		log.Error(err, "unable to update status")
	}

	log.Info("finished reconcile")

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *FunctionReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&v1alpha1.Function{}).
		Complete(r)
}

func (r *FunctionReconciler) desiredConfigMap(function v1alpha1.Function) (corev1.ConfigMap, error) {
	h := sha1.New()
	h.Write([]byte(function.Spec.Code))
	bs := h.Sum(nil)

	mainCode, userCode := embed(function.Spec.FunctionName, function.Spec.Code)

	cm := corev1.ConfigMap{
		TypeMeta: metav1.TypeMeta{
			APIVersion: corev1.SchemeGroupVersion.String(),
			Kind:       "ConfigMap",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      function.Name,
			Namespace: function.Namespace,
			Annotations: map[string]string{
				"configHash": string(bs),
			},
		},
		Data: map[string]string{
			"main.go": mainCode,
			"code.go": userCode,
		},
	}

	// For garbage collector to clean up resources.
	if err := ctrl.SetControllerReference(&function, &cm, r.Scheme); err != nil {
		return cm, err
	}

	return cm, nil
}

func (r *FunctionReconciler) desiredDeployment(function v1alpha1.Function, cm corev1.ConfigMap) (appsv1.Deployment, error) {
	dep := appsv1.Deployment{
		TypeMeta: metav1.TypeMeta{APIVersion: appsv1.SchemeGroupVersion.String(), Kind: "Deployment"},
		ObjectMeta: metav1.ObjectMeta{
			Name:      function.Name,
			Namespace: function.Namespace,
		},
		Spec: appsv1.DeploymentSpec{
			Selector: &metav1.LabelSelector{
				MatchLabels: map[string]string{"function": function.Name},
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels:      map[string]string{"function": function.Name},
					Annotations: cm.Annotations,
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "golang",
							Image: "golang",
							Ports: []corev1.ContainerPort{
								{
									ContainerPort: 80,
								},
							},
							VolumeMounts: []corev1.VolumeMount{
								{
									Name:      "functions-volume",
									MountPath: "/usr/scripts",
								},
							},
							Command: []string{"sh", "-c", "cp -R /usr/scripts/ /code/ && cd /code/ && go mod init serverless && go mod tidy && go run ."},
						},
					},
					Volumes: []corev1.Volume{
						{
							Name: "functions-volume",
							VolumeSource: corev1.VolumeSource{
								ConfigMap: &corev1.ConfigMapVolumeSource{
									LocalObjectReference: corev1.LocalObjectReference{
										Name: cm.Name,
									},
								},
							},
						},
					},
				},
			},
		},
	}

	// For garbage collector to clean up resources.
	if err := ctrl.SetControllerReference(&function, &dep, r.Scheme); err != nil {
		return dep, err
	}

	return dep, nil
}

func (r *FunctionReconciler) desiredService(function v1alpha1.Function, cm corev1.ConfigMap) (corev1.Service, error) {
	ser := corev1.Service{
		TypeMeta: metav1.TypeMeta{APIVersion: corev1.SchemeGroupVersion.String(), Kind: "Service"},
		ObjectMeta: metav1.ObjectMeta{
			Name:      function.Name + "-lb",
			Namespace: function.Namespace,
			Annotations: map[string]string{
				"service.beta.kubernetes.io/do-loadbalancer-protocol":  "http",
				"service.beta.kubernetes.io/do-loadbalancer-size-slug": "lb-small",
			},
		},
		Spec: corev1.ServiceSpec{
			Type:     "LoadBalancer",
			Selector: map[string]string{"function": function.Name},
			Ports: []corev1.ServicePort{
				{
					Name:       "http",
					Protocol:   "TCP",
					Port:       80,
					TargetPort: intstr.FromInt(80),
				},
			},
		},
	}

	// For garbage collector to clean up resources.
	if err := ctrl.SetControllerReference(&function, &ser, r.Scheme); err != nil {
		return ser, err
	}

	return ser, nil
}

// Inject code logic:

const boilerplateMain = `package main

import (
"log"
"net/http"
)

func main() {
http.HandleFunc("/", %s)

log.Fatal(http.ListenAndServe(":80", nil))
}`

const boilerplateCode = `package main

%s
`

func embed(fnName, code string) (string, string) {
	m := fmt.Sprintf(boilerplateMain, fnName)
	c := fmt.Sprintf(boilerplateCode, code)

	return m, c
}
